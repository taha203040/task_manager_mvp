import { Request, Response } from "express";
import { Createtask, GetTasksByUser, GetTaskById, UpdateTask, DeleteTask } from "../../../Application/use-cases/Team-usecases/Task_usecases";
import { TaskRepoPostGress } from "../../../Infrastructure/Repositories/Sql/TaskPostgress";
import pool from "../../../Config/db";
import { Task, TaskPriority } from "../../../Domain/Entities/Task";
const taskrepo = new TaskRepoPostGress(pool);

export class TaskController {
    static async createTask(req: Request, res: Response) {
        try {
            const { title, description, status, userId, teamId } = req.body;

            if (!title || !userId) {
                return res.status(400).json({ error: "Title and userId are required" });
            }

            const task: Task = {
                id: crypto.randomUUID(), // Will be generated by repository
                title,
                content: description || '',
                state: status || 'pending',
                userId,
                priority: TaskPriority.LOW,
                createdAt: new Date(),
                updatedAt: new Date()
            };

            const createTaskUseCase = new Createtask(taskrepo);
            await createTaskUseCase.execute(task);

            res.status(201).json({ message: "Task created successfully" });
        } catch (err) {
            console.error(err);
            res.status(500).json({ error: "Server error" });
        }
    }

    static async getTasksByUser(req: Request, res: Response) {
        try {
            const { userId } = req.params;

            if (!userId) {
                return res.status(400).json({ error: "User ID is required" });
            }

            const getTasksUseCase = new GetTasksByUser(taskrepo);
            const tasks = await getTasksUseCase.execute(userId);

            res.status(200).json({ tasks });
        } catch (err) {
            console.error(err);
            res.status(500).json({ error: "Server error" });
        }
    }

    static async getTaskById(req: Request, res: Response) {
        try {
            const { id } = req.params;

            if (!id) {
                return res.status(400).json({ error: "Task ID is required" });
            }

            const getTaskUseCase = new GetTaskById(taskrepo);
            const task = await getTaskUseCase.execute(id);

            if (!task) {
                return res.status(404).json({ error: "Task not found" });
            }

            res.status(200).json({ task });
        } catch (err) {
            console.error(err);
            res.status(500).json({ error: "Server error" });
        }
    }

    static async updateTask(req: Request, res: Response) {
        try {
            const { id } = req.params;
            const { title, description, status, userId, teamId } = req.body;

            if (!id) {
                return res.status(400).json({ error: "Task ID is required" });
            }

            // First get the existing task to merge with updates
            const getTaskUseCase = new GetTaskById(taskrepo);
            const existingTask = await getTaskUseCase.execute(id);

            if (!existingTask) {
                return res.status(404).json({ error: "Task not found" });
            }

            const updatedTask = {
                ...existingTask,
                title: title || existingTask.title,
                content: description !== undefined ? description : existingTask.content,
                status: status || existingTask.state,
                userId: userId || existingTask.userId,
                updatedAt: new Date()
            };

            const updateTaskUseCase = new UpdateTask(taskrepo);
            await updateTaskUseCase.execute(updatedTask);

            res.status(200).json({ message: "Task updated successfully" });
        } catch (err) {
            console.error(err);
            res.status(500).json({ error: "Server error" });
        }
    }

    static async deleteTask(req: Request, res: Response) {
        try {
            const { id } = req.params;

            if (!id) {
                return res.status(400).json({ error: "Task ID is required" });
            }

            const deleteTaskUseCase = new DeleteTask(taskrepo);
            await deleteTaskUseCase.execute(id);

            res.status(200).json({ message: "Task deleted successfully" });
        } catch (err) {
            console.error(err);
            res.status(500).json({ error: "Server error" });
        }
    }
}